// src/tests/gen-funcs/genRootFrameTest.js

const fs = require('fs');
const path = require('path');
// Import utility functions
const { findRootFrameKey, getNameFromTokenKey } = require('../../utils/tokenUtils');
const {
    kebabToPascalCase,
    extractStylesFromTokens
} = require('../utils/testGenUtils');

/**
 * Generates Jest test code for the root frame component based on design tokens.
 * Reads tokens from a JSON file.
 * @param {string} designTokensPath - Path to the design tokens JSON file.
 * @returns {string} - The generated test code as a string.
 */
function genRootFrameTest(designTokensPath) {
  try {
    // Read and parse the design tokens JSON file
    const designTokensRaw = fs.readFileSync(designTokensPath, 'utf8');
    const designTokens = JSON.parse(designTokensRaw);

    // Find the root frame key (e.g., "hands-on-design")
    const rootFrameKey = findRootFrameKey(designTokens);
    if (!rootFrameKey) {
      throw new Error('Could not find the root frame key in the design tokens.');
    }

    // Get component name using the utility from tokenUtils
    const kebabComponentName = getNameFromTokenKey(rootFrameKey);
    const pascalComponentName = kebabToPascalCase(kebabComponentName);

    // Extract Tailwind classes using the utility from testGenUtils, passing isRoot = true
    const { tailwindClasses } = extractStylesFromTokens(designTokens, rootFrameKey, true);
    const testId = kebabComponentName; // Use kebab-case name for test ID

    // Format Tailwind classes for the test assertion
    const formattedClasses = tailwindClasses.map(cls => `'${cls}'`).join(', ');

    // Generate the test file content
    const testCode = `// ${kebabComponentName}.test.js
// Auto-generated by genRootFrameTest.js based on ${path.basename(designTokensPath)}
// Do not edit manually, regenerate if design tokens change.

import { render, screen } from '@testing-library/react';
import ${pascalComponentName} from '../../components/${pascalComponentName}'; // Adjusted path to components dir

describe('${pascalComponentName} Component', () => {
  it('should have the correct Tailwind classes based on design tokens', () => {
    render(<${pascalComponentName} />);
    const rootElement = screen.getByTestId('${testId}'); // Assuming the component renders with data-testid

    expect(rootElement).toBeInTheDocument();

    // Verify Tailwind classes using arbitrary values
    expect(rootElement).toHaveClass(${formattedClasses});

    // Optionally, add tests for children structure or specific attributes if needed
  });
});
`;

    return testCode;

  } catch (error) {
    console.error("Error generating test code:", error);
    throw error; // Re-throw the error to indicate failure
  }
}

// Example Usage (if run directly):
if (require.main === module) {
  const tokensPath = path.join(__dirname, '..', '..', 'data', 'design-tokens.json');
  // Determine the output file name based on the original kebab-case name
  let rootKey = 'default-root-key'; // Provide a default or handle error
  let kebabName = 'default-component-name';
  try {
      const tokens = JSON.parse(fs.readFileSync(tokensPath, 'utf8'));
      rootKey = findRootFrameKey(tokens);
      if (!rootKey) throw new Error('Root frame key not found for naming.');
      kebabName = getNameFromTokenKey(rootKey);
  } catch (error) {
      console.error(`Error determining output file name: ${error.message}`);
      // Decide if you want to exit or use defaults
      process.exit(1);
  }

  const outputFileName = `${kebabName}.test.js`;
  const outputPath = path.join(__dirname, '..', outputFileName);

  try {
    const generatedCode = genRootFrameTest(tokensPath);
    fs.writeFileSync(outputPath, generatedCode); // Write to src/tests directory
    console.log(`Test file generated successfully: ${outputPath}`);
  } catch (error) {
    console.error(`Failed to generate test file: ${error.message}`);
    process.exit(1);
  }
}

module.exports = genRootFrameTest; // Keep CommonJS export for potential external use