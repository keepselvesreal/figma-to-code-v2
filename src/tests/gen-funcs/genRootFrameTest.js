// src/tests/gen-funcs/genRootFrameTest.js

const fs = require('fs');
const path = require('path');
// Import utility functions
const { findRootFrameKey, getNameFromTokenKey } = require('../../utils/tokenUtils');
const {
    kebabToPascalCase,
    extractStylesFromTokens
} = require('../utils/testGenUtils');

/**
 * Generates Jest test code for the root frame component based on design tokens.
 * Reads tokens from a JSON file.
 * @param {string} designTokensPath - Path to the design tokens JSON file.
 * @param {string} outputDir - Absolute path of the directory where the generated test file will be located.
 * @param {string} componentDirRelative - Relative path to the component directory from the test file location.
 * @returns {string} - The generated test code as a string.
 */
function genRootFrameTest(designTokensPath, outputDir, componentDirRelative) {
  try {
    // Read and parse the design tokens JSON file
    const designTokensRaw = fs.readFileSync(designTokensPath, 'utf8');
    const designTokens = JSON.parse(designTokensRaw);

    // Find the root frame key (e.g., "hands-on-design")
    const rootFrameKey = findRootFrameKey(designTokens);
    if (!rootFrameKey) {
      throw new Error('디자인 토큰에서 루트 프레임 키를 찾을 수 없습니다.');
    }

    // Get component name using the utility from tokenUtils
    const kebabComponentName = getNameFromTokenKey(rootFrameKey);
    const pascalComponentName = kebabToPascalCase(kebabComponentName);

    // Extract Tailwind classes using the utility from testGenUtils, passing isRoot = true
    const { classList: maybeTailwindClasses } = extractStylesFromTokens(designTokens[rootFrameKey], { isRoot: true });
    const tailwindClasses = Array.isArray(maybeTailwindClasses) ? maybeTailwindClasses : []; // Ensure it's an array
    const testId = kebabComponentName; // Use kebab-case name for test ID

    // Format Tailwind classes for the test assertion
    const formattedClasses = tailwindClasses.map(cls => `'${cls}'`).join(', ');

    // Calculate component import path (using relative path from outputDir)
    const componentImportPath = path.join(componentDirRelative, pascalComponentName).replace(/\\/g, '/'); // Use \\ for Windows path separator and then replace with /

    // Generate the test file content
    const testCode = `// ${kebabComponentName}.test.js
// Auto-generated by genRootFrameTest.js based on ${path.basename(designTokensPath)}
// Do not edit manually, regenerate if design tokens change.

import { render, screen } from '@testing-library/react';
import ${pascalComponentName} from '${componentImportPath}'; // Use dynamically generated path

describe('${pascalComponentName} Component', () => {
  it('should have the correct Tailwind classes based on design tokens', () => {
    render(<${pascalComponentName} />);
    const rootElement = screen.getByTestId('${testId}'); // Assuming the component renders with data-testid

    expect(rootElement).toBeInTheDocument();

    // Verify Tailwind classes using arbitrary values
    expect(rootElement).toHaveClass(${formattedClasses});

    // Optionally, add tests for children structure or specific attributes if needed
  });
});
`;

    return testCode;

  } catch (error) {
    throw error; // Re-throw the error to indicate failure
  }
}

module.exports = genRootFrameTest; // Keep CommonJS export for potential external use